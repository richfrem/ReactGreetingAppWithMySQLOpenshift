# Build stage
FROM --platform=linux/amd64 node:20-alpine as build

WORKDIR /app

# Copy package files
COPY frontend/client/package*.json ./

# Install dependencies
RUN npm install

# Copy source code
COPY frontend/client/ ./

# Build the application with production mode
RUN npm run build

# Production stage
FROM --platform=linux/amd64 nginx:alpine

# Copy built assets from build stage
COPY --from=build /app/dist /usr/share/nginx/html

# Create required directories and set permissions for OpenShift
RUN mkdir -p /tmp/nginx/cache/client_temp \
    /tmp/nginx/cache/proxy_temp \
    /tmp/nginx/cache/fastcgi_temp \
    /tmp/nginx/cache/uwsgi_temp \
    /tmp/nginx/cache/scgi_temp \
    /var/cache/nginx \
    /var/run \
    /var/log/nginx \
    /docker-entrypoint.d && \
    chmod -R 777 /tmp/nginx && \
    chmod -R 777 /var/cache/nginx && \
    chmod -R 777 /etc/nginx && \
    chmod -R 777 /var/run && \
    chmod -R 777 /var/log/nginx && \
    chmod -R 777 /docker-entrypoint.d && \
    chown -R nginx:0 /tmp/nginx && \
    chown -R nginx:0 /var/cache/nginx && \
    chown -R nginx:0 /etc/nginx && \
    chown -R nginx:0 /var/run && \
    chown -R nginx:0 /var/log/nginx && \
    chown -R nginx:0 /docker-entrypoint.d && \
    chown -R nginx:0 /usr/share/nginx/html && \
    chmod -R 777 /usr/share/nginx/html

# Remove default nginx configuration to prevent conflicts
RUN rm -f /etc/nginx/conf.d/default.conf.template && \
    rm -f /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh && \
    rm -f /docker-entrypoint.d/20-envsubst-on-templates.sh

# Expose port 8080 (OpenShift preferred)
EXPOSE 8080

# Run nginx with non-root user (OpenShift requirement)
USER nginx

CMD ["nginx", "-g", "daemon off;"] 